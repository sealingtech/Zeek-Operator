apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ zeek.fullname }}-etc-config
  namespace: {{ zeek.namespace }}
data:
  broccoli.conf: |
    # This is the Broccoli system-wide configuration file. 
    #
    # The config file is structured into sections. The settings in each
    # section are called a domain. Each domain is identified as follows:
    #
    # [ name ]
    # 
    # where "name" is a single word consisting of alphanumeric letters
    # without whitespace. The beginning of the document can contain
    # additional settings, these comprise the default domain. It will be
    # used when zeek_conf_set_domain() is never used.
    #
    # Entries are of the form <identifier> <value>, where the identifier
    # is a sequence of letters, and value can be a string (including
    # whitespace), and floating point or integer numbers. Comments start
    # with a "#" and go to the end of the line. For boolean values, you
    # may also use "yes", "on", "true", "no", "off", or "false".
    # Strings may contain whitespace, but need to be surrounded by
    # double quotes '"'.
    #
    # You can name identifiers any way you like, but to keep things
    # organized we recommend a hierarchical structure. Case matters.
    #
    # Examples:
    #
    # Foo/PeerName         myzeek.securesite.com
    # Foo/PortNum          123
    # Bar/SomeFloat        1.23443543
    # Bar/SomeLongStr      "Hello World"
    #
    
    # Debugging output
    # ----------------
    #/broccoli/debug_messages       yes
    #/broccoli/debug_calltrace      yes
    
    # Encryption setup
    # ----------------
    #
    # In order to configure encrypted communications, you have to point
    # these two entries to this agent's certificate + private key and
    # the trusted CA's certificate, respectively. You can optionally
    # store the passphrase for this agent's private key in the config
    # file as well, but you should obviously only do so when the config
    # file has appropriate access restrictions. Check the manual for
    # details.
    #
    # use_ssl is the main switch to control whether the SSL settings
    # are used (yes/on/1) or not (no/false/0). When use_ssl is not
    # present, SSL is attempted if certificates are configured, other-
    # wise cleartext connections are used. When it is present and enabled,
    # then setup is aborted if certificates are not found. In no case
    # does an SSL setup ever fall back to a cleartext one.
    #
    #/broccoli/use_ssl     yes
    #/broccoli/ca_cert     <path>/ca_cert.pem
    #/broccoli/host_cert   <path>/zeek_cert.pem
    #/broccoli/host_pass   foo
    
    # Your settings below
    # -------------------
    
  zeekctl.cfg: |
    ## Global BroControl configuration file.
    
    ###############################################
    # Mail Options
    
    # Recipient address for all emails sent out by Bro and BroControl.
    MailTo = root@localhost
    
    # Mail connection summary reports each log rotation interval. A value of 1
    # means mail connection summaries, and a value of 0 means do not mail
    # connection summaries.  This option has no effect if the trace-summary
    # script is not available.
    MailConnectionSummary = 1
    
    # Lower threshold (in percentage of disk space) for space available on the
    # disk that holds SpoolDir. If less space is available, "zeekctl cron" starts
    # sending out warning emails.  A value of 0 disables this feature.
    MinDiskSpace = 5
    
    # Send mail when "zeekctl cron" notices the availability of a host in the
    # cluster to have changed.  A value of 1 means send mail when a host status
    # changes, and a value of 0 means do not send mail.
    MailHostUpDown = 1
    
    # Send Mail
    SendMail = /usr/sbin/sendmail
    
    ###############################################
    # Logging Options
    
    # Rotation interval in seconds for log files on manager (or standalone) node.
    # A value of 0 disables log rotation.
    LogRotationInterval = 3600
    
    # Expiration interval for archived log files in LogDir.  Files older than this
    # will be deleted by "zeekctl cron".  The interval is an integer followed by
    # one of these time units:  day, hr, min.  A value of 0 means that logs
    # never expire.
    LogExpireInterval = 0
    
    # Enable BroControl to write statistics to the stats.log file.  A value of 1
    # means write to stats.log, and a value of 0 means do not write to stats.log.
    StatsLogEnable = 1
    
    # Number of days that entries in the stats.log file are kept.  Entries older
    # than this many days will be removed upon running "zeekctl cron".  A value of 0
    # means that entries never expire.
    StatsLogExpireInterval = 0
    
    ###############################################
    # Other Options
    
    # Show all output of the zeekctl status command.  If set to 1, then all output
    # is shown.  If set to 0, then zeekctl status will not collect or show the peer
    # information (and the command will run faster).
    StatusCmdShowAll = 0
    
    # Site-specific policy script to load. Bro will look for this in
    # $PREFIX/share/zeek/site. A default local.zeek comes preinstalled
    # and can be customized as desired.
    SitePolicyScripts = local.zeek
    
    # Location of the log directory where log files will be archived each rotation
    # interval.
    LogDir = /usr/local/zeek/logs/
    
    # Location of the spool directory where files and data that are currently being
    # written are stored.
    SpoolDir = /usr/local/zeek/spool/ 
    
    # Location of other configuration files that can be used to customize
    # BroControl operation (e.g. local networks, nodes).
    CfgDir = /usr/local/zeek/etc
    
  networks.cfg: |
    # List of local networks in CIDR notation, optionally followed by a
    # descriptive tag.
    # For example, "10.0.0.0/8" or "fe80::/64" are valid prefixes.

    10.0.0.0/8          Private IP space
    172.16.0.0/12       Private IP space
    192.168.0.0/16      Private IP space
  node.cfg: |
    [logger]
    type=logger
    host=localhost
    #
    [manager]
    type=manager
    host=localhost
    #
    [proxy-1]
    type=proxy
    host=localhost
    #
    [worker-1]
    type=worker
    host=localhost
    interface=af_packet::${INTERFACE}
